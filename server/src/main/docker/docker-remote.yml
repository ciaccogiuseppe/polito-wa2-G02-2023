version: '3'
services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    hostname: keycloak
    restart: on-failure
    ports:
      - "8001:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_HOSTNAME=keycloak
    volumes:
      - ./keycloak/realms/SpringBootKeycloak-realm.json:/opt/keycloak/data/import/realm.json
    command:
      - start-dev
      - --import-realm
    networks:
      - app-network

  database:
    image: postgres:latest
    container_name: database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - ./postgres/docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    networks:
      - app-network

  springboot-app:
    image:
      'ciaccogiuseppe/polito_wa2_g02_2023:lab5'
    build:
      context: .
    container_name: server
    ports:
      - "8081:8081"
    volumes:
      - ./docker/logback-spring.xml:/data/logback_config/logback.xml
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - KEYCLOAK_AUTH-SERVER-URL=http://keycloak:8080
      - KEYCLOAK_REALM=SpringBootKeycloak
      - KEYCLOAK_RESOURCE=springboot-keycloak-client
      - KEYCLOAK_CREDENTIALS_USERNAME=admin
      - KEYCLOAK_CREDENTIALS_PASSWORD=admin
      - KEYCLOAK_ADMIN_CLIENT=admin-cli
      - KEYCLOAK_ADMIN_REALM=master
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/SpringBootKeycloak
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/SpringBootKeycloak/protocol/openid-connect/certs
      - LOGGING_CONFIG=/data/logback_config/logback.xml
      - LOKI_HOST=loki
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411/api/v2/spans
    depends_on:
      - keycloak
      - database
      - tempo
    networks:
      - app-network



  tempo:
    image: grafana/tempo
    hostname: tempo
    container_name: tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin
    networks:
      - app-network

  loki:
    image: grafana/loki
    container_name: loki
    hostname: loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    networks:
      - app-network


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - app-network
  # Prometheus: http://localhost:9090/
  # Grafana: http://localhost:3000/

networks:
  app-network:

